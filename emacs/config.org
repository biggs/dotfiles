#+TITLE: Literate Emacs Config
#+STARTUP: noindent content

* Basics
#+BEGIN_SRC emacs-lisp
;;; .config/doom/config.el -*- lexical-binding: t; -*-
#+END_SRC

Cosmetic things.
#+BEGIN_SRC emacs-lisp
(setq
  doom-font (font-spec :family "Source Code Pro" :size 15 :weight 'normal)
  doom-theme 'monokai
  monokai-highlight-line "#3A3A3A")
#+END_SRC

Maximise on startup.
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC


** Global Keybindings
 Extra Global keybindings.

 Helm
 #+BEGIN_SRC emacs-lisp
(map!
  :n  "C-s" 'helm-swoop
  :n  "C-S-s" 'helm-multi-swoop-all
  :n  "C-]" 'helm-projectile-rg)
 #+END_SRC

 Misc.
 #+BEGIN_SRC emacs-lisp
(map!
  :n "C-e" 'end-of-line
  :n "C-a" 'beginning-of-line-text
  :n "<C-tab>" 'evil-window-next
  :n "K" 'evil-lookup)
 #+END_SRC

 Function keys.
 #+BEGIN_SRC emacs-lisp
(map!
  :n "<f5>" 'compile
  :n "<f8>" 'org-capture
  :n "<f9>" 'org-agenda)
 #+END_SRC


* ORG Specific
"K" to lookup in MacOS dictionary:
#+BEGIN_SRC emacs-lisp
(defun lookup-osx-dict-app () "Search for word at point in Mac dictionary"
  (interactive)
  (call-process      ; call and disown "open" with formatted arg
  "open" nil 0 nil
  (format "dict:://%s" (thing-at-point 'word))))

(add-hook 'org-mode-hook
          '(lambda () (setq-local evil-lookup-func #'lookup-osx-dict-app)))
#+END_SRC

Use XeLaTeX for export and highlight LaTeX and entities.
#+BEGIN_SRC emacs-lisp
(setq
  org-pandoc-options-for-latex-pdf '((pdf-engine . "xelatex"))
  org-highlight-latex-and-related '(latex script entities))
#+END_SRC

Keybindings for Pandoc export and "t" for selecting todo state.
#+BEGIN_SRC emacs-lisp
(map! :mode 'org-mode
      :n "<f5>" 'org-pandoc-export-to-latex-pdf
      :n "t" 'org-todo)
#+END_SRC

Disable org-indent-mode.
#+BEGIN_SRC emacs-lisp
(remove-hook 'org-mode-hook #'org-indent-mode)
#+END_SRC

Prettify
#+BEGIN_SRC emacs-lisp
(setq
 org-pretty-entities-include-sub-superscripts t
 prettify-symbols-unprettify-at-point 'right
 )
#+END_SRC

** Anki Editor Mode
Cloze with meta-C.
#+BEGIN_SRC emacs-lisp
(map! :mode 'anki-editor-mode
      :n "M-c" 'anki-editor-cloze-region)
#+END_SRC

** Bibliographies and Referencing
Org-ref and bibtex setup.
#+BEGIN_SRC emacs-lisp
(setq
  ;; Notes for BibTex
  org-ref-bibliography-notes "~/Dropbox/ORG/papers.org"

  ;; Set the default bibliography for both plugins
  org-ref-default-bibliography '("~/Dropbox/references.bib")
  bibtex-completion-bibliography "~/Dropbox/references.bib"

  ;; helm-bibtex finds pdf using bibtex field "file" set by zotero better-bibtex.
  ;; we set that to open with mac "open" and org-ref to get pdfs using this.
  bibtex-completion-pdf-field "file"
  bibtex-completion-pdf-open-function
  (lambda (fpath) (start-process "open" "*open*" "open" fpath))
  org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex

  ;; Custom created note format
  org-ref-note-title-format
  "* TODO %2a. %t (%y).
      :PROPERTIES:
      :Custom_ID: %k
      :AUTHOR: %9a
      :YEAR: %y
      :Interest:
      :Difficulty:
      :Tags:
      :END:
      :CITE: %l"
)
#+END_SRC

** Agenda and GTD
#+BEGIN_SRC emacs-lisp
(setq
    ;; ORG TO DO setups
  org-agenda-files (list "~/Dropbox/ORG/todo/")

  org-agenda-custom-commands
  '(("w" todo "WAITING" nil)
    ("n" todo "NEXT" nil)
    ;; options: org-agenda.el:org-agenda-custom-commands-local-options
    (" " "Main Agenda View"
      ((todo "NEXT"
            ((org-agenda-overriding-header "NEXT Actions")))
      (tags "REFILE"
            ((org-agenda-overriding-header "Items to Refile")
              (org-tags-match-list-sublevels nil)))
      (agenda "" ((org-agenda-span 8)
                  (org-agenda-start-day nil)))  ;; today
      (todo "WAITING"
            ((org-agenda-overriding-header "Waiting Actions")))
      (todo "HOLD"
            ((org-agenda-overriding-header "On Hold Actions"))))))

  org-todo-keywords
  (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
          (sequence "HOLD(h)" "WAITING(w@/!)" "MAYBE(m)" "|" "CANCELLED(c)")))

  org-todo-keyword-faces
  (quote (("TODO" :foreground "red" :weight bold)
          ("NEXT" :foreground "orange" :weight bold)
          ("DONE" :foreground "green" :weight bold)
          ("MAYBE" :foreground "blue" :weight bold)
          ("HOLD" :foreground "gold" :weight bold)
          ("CANCELLED" :foreground "purple" :weight bold)
          ("WAITING" :foreground "magenta" :weight bold)))

  org-capture-templates
  (quote (("t" "todo" entry (file "~/Dropbox/ORG/todo/refile.org")
            "* TODO %?\n%U\n%a\n")))
)
#+END_SRC


* Language-Specific
** C
#+BEGIN_SRC emacs-lisp
(setq
  c-basic-offset 8
  tab-width 8
  indent-tabs-mode t
  c-default-style "linux")
#+END_SRC

** TeX
Tex master files are called "main".
#+BEGIN_SRC emacs-lisp
(setq TeX-master "main")
#+END_SRC


* Miscellaneous
#+BEGIN_SRC emacs-lisp
(setq
  ;; Whitespace mode
  whitespace-style '(face tabs tab-mark newline-mark)
  whitespace-display-mappings '((newline-mark 10 [172 10]) (tab-mark 9 [9655 9]))

  ;; Avy switch all windows and allow all alphabetic keys
  avy-all-windows 'all-frames
  avy-keys (number-sequence ?a ?z) ; a-z for avi

  ;; Get aliases in inferior shell
  shell-command-switch "-ic"

  ;; Switch windows with S-<direction>
  windmove-default-keybindings t

  ;; Faster projectile
  projectile-enable-caching t

  ;; When using 'K' to lookup (non-lisp) things, use dash
  evil-lookup-func #'dash-at-point
)

;; Disable evil in info windows
(evil-set-initial-state 'info-mode 'emacs)
#+END_SRC


** Hide Compilation Window
Make the compilation window automatically disappear if no errors - from enberg
on #emacs.
#+BEGIN_SRC emacs-lisp
(defun my-comp-finish (buf str)
  (if (null (string-match ".*exited abnormally.*" str))
      ;;no errors, make the compilation window go away after a second
      (progn
        (run-at-time
          "1 sec" nil 'delete-windows-on
          (get-buffer-create "*compilation*"))
        (message "No Compilation Errors!"))))
(add-hook 'compilation-finish-functions 'my-comp-finish)
#+END_SRC

** Unicode-Math Input
Fancy input rules - add all non-conflicting characters from unicode-math-symbols
list:
https://github.com/vspinu/math-symbol-lists/blob/master/math-symbol-lists.el
Everything is prefixed with ";" rather than "\", including sub and
super-scripts. If extra rules wanted, use form: (quail-define-rules ("\\unrhd"
#X22B5) ("\\unrhd" #X22B5))

#+BEGIN_SRC emacs-lisp
(package-initialize)
(require 'math-symbol-lists)
(quail-define-package "math" "UTF-8" "Î©" t)
(mapc (lambda (x)
        (if (cddr x)
            (quail-defrule
              ;; Remove "\" prefix if exists (not for sub/super scripts) and add ";" to all.
              (concat ";" (string-remove-prefix "\\" (cadr x)))
              (car (cddr x)))))
      (append math-symbol-list-basic math-symbol-list-extended
              math-symbol-list-subscripts math-symbol-list-superscripts))

#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq default-input-method 'math)
#+END_SRC
** Ranger
#+BEGIN_SRC emacs-lisp
(setq
ranger-cleanup-on-disable t
ranger-ignored-extensions '("mkv" "iso" "mp4" "DS_Store" "pdf")
ranger-max-preview-size 1
ranger-dont-show-binary t)
#+END_SRC
** Fixes
#+BEGIN_SRC emacs-lisp
;; Fix matlab commenting
(setq octave-comment-char 37)
#+END_SRC
