#+TITLE: ZSH Configuration
#+AUTHOR: Felix Biggs
#+LANGUAGE:  en
#+SETUPFILE: ~/org-html-themes/setup/theme-readtheorg.setup
#+STARTUP: overview



* Setting the Path

Start with the default macOS path and add others used for programs. This might
be improved by symlinking these files to a personal ~/usr/local/bin~.

#+BEGIN_SRC sh  :tangle tangled.d/zshrc.sh

## Set the path to the mac default, then add /bin as personal choice
PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11/bin
PATH=$PATH:~/bin

## Append python 3.4 path to $PATH
#export PATH="${PATH}:/Library/Frameworks/Python.framework/Versions/3.4/bin"

## MacPorts append to $PATH as needed
export PATH="${PATH}:/opt/local/bin:/opt/local/sbin"

# added by Anaconda3 4.2.0 installer
export PATH="/Users/fez/anaconda3/bin:$PATH"

# add tex path
export PATH="$PATH:/usr/local/texlive/2013/bin/universal-darwin"

#+END_SRC

** TODO Path file or symlink?



* Oh-My-Zsh Initializtation

Oh-My-Zsh is a set of Zsh plugins and customisations. It is quite heavyweight,
so I would like to move to something else at some point.

Most of it's interesting functionality is in the oh-my-zhs/lib folder.

This sets the paths to oh-my-zsh, to a custom directory which is automatically loaded by
it, chooses a few settings and plugins and then actually loads it.


*Plugins*
- [[https://github.com/robbyrussell/oh-my-zsh][git]] :: shows info about an occupied git directory
- [[https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/z][z]] :: a clever script that stores recently used directories that can then be skipped to
- [[https://github.com/zsh-users/zsh-syntax-highlighting][zsh-syntax-highlighting]] :: installed in custom; fish like shell syntax highlighting


#+BEGIN_SRC sh   :tangle tangled.d/zshrc.sh

export ZSH=/Users/fez/Projects/dotfiles/oh-my-zsh
export ZSH_CUSTOM=/Users/fez/Projects/dotfiles/zsh_custom

ZSH_THEME="mytheme"
ENABLE_CORRECTION="true"
COMPLETION_WAITING_DOTS="true"  # red dots
plugins=(git z zsh-syntax-highlighting)

source $ZSH/oh-my-zsh.sh

#+END_SRC



-  :: 

** TODO z -> [[https://github.com/clvv/fasd][fasd]]
- Also uses frequency and recency
- Works for files as well as directories
- zle-widgets: use , and keyboard shortcuts for completion 

** TODO oh-my-zsh -> something lighter


* Useful personal customisations

** Keybindings
You can view the ZSH command bindings with ~bindkey -L~, but there are many. These
are some I find particularly useful.

| ^A | beginning-of-line                          |
| ^L | clear-screen                               |
| ^E | end-of-line                                |

| ^K | kill-line                                  |
| ^U | kill-whole-line                            |
| ^W | backward-kill-word                         |
| ^N | down-line-or-history                       |
| ^O | accept-line-and-down-history # not in bash |
| ^P | up-line-or-history                         |
| ^R | history-incremental-search-backward        |
| ^Y | self-insert  # paste back killed text!!    |


Now more advanced, not in bash:
| ^[>  | end-of-buffer-or-history                                                 |
| ^[n  | history-search-forward  # searches for the first word only               |
| ^[p  | history-search-backward                                                  |

| ^[q  | push-line  # save the current command - after pressing enter, reappears! |
| ^Q   | push-line  # same as above                                               |

| ^X ^V | vi-cmd-mode  # literally just go briefly to vi 'normal' mode |
| ^X ^E | edit-command-line  # open cmd line in $EDITOR                |
| ^_    | undo  # actually also equivalent to <C-/>                    |

Also: ~push-line-or-edit~ - bind to something as really useful

Note these are the emacs commands. One of the final commands listed, ^X ^V, which
temporarily skips into vi command mode for moving around and editing, is so useful I
give it an extra keybinding to <ESC><ESC>.

#+BEGIN_SRC sh  :tangle tangled.d/zshrc.sh

bindkey -e  # emacs keybindings
bindkey "^[^[" vi-cmd-mode  # temporarily switch to vi-cmd-mode (equivalent to ^X^V)

#+END_SRC


** Misc other

#+BEGIN_SRC sh  :tangle tangled.d/zshrc.sh

# Set myself as default user
DEFAULT_USER=fez

#Display CPU usage stats for commands taking more than 7 seconds
REPORTTIME=7

# Stop using CTRL-S to freeze screen so can use to save in vim instead
stty -ixon

## Neovim as editor (opens really fast!)
export VISUAL="nvim"
export EDITOR="nvim"

#+END_SRC


* Useful Aliases and Functions

** Emacs
Up to date emacs, and useful shortcuts for emacsclient (opening the file without
the shell waiting and starting the server if necessary, and an alias creating a
new window/'frame').

#+BEGIN_SRC sh   :tangle tangled.d/zshrc.sh

alias emacs="emacs-25.1"

alias e="/usr/local/Cellar/emacs/25.1/bin/emacsclient --no-wait --alternate-editor=''"
alias ec="e --create-frame"

#+END_SRC

** Vi
1. Use Neovim, a fork of vim with better features.

2. Use neovim as the manpage reader for syntax highlighting (N.B. automatically
   uses 'neoman' plugin. Personally add 'less' keybindings and Q for quit - q is
   annoyingly remapped after start by neoman to :close)

3. Press ctrl-z in the terminal to foreground process, so can switch in and out
   of terminal vim with ctrl-z.

#+BEGIN_SRC sh  :tangle tangled.d/zshrc.sh

alias vi='nvim'
## set nvim as man page reader! 
alias man="man -P \"nvim -R -c 'set ft=man' -c 'runtime! macros/less.vim' -c 'noremap Q :q!<CR>' -\" "

# Allow returning to Vim by pressing Ctrl+Z (actually just runs fg)
fancy-ctrl-z () {
    if [[ $#BUFFER -eq 0  ]]; then
        BUFFER=" fg"  # include space so not in history
        zle accept-line
    else
        zle push-input
        zle clear-screen
    fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z

#+END_SRC


** Miscellaneous Aliases
These should be self-explanatory.

#+BEGIN_SRC sh  :tangle tangled.d/zshrc.sh

## launch MIT scheme with a special wrapper for history and competion (rlwrap)
alias sicp="rlwrap -r -c -f \"$HOME\"/.scheme_completion.txt mit-scheme"

## Colorize ls
## (-F slash after directory; -G color; -h human size units with -l)
alias ls='ls -FGh'

## Create alias gitlog, giving much more detailed output for git
alias gitlog="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

## get internet speed
alias speedtest='wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test500.zip'

## Allow using vlc
alias vlc='/Applications/VLC.app/Contents/MacOS/VLC'

## History search using grep
alias hgrep='history | grep '

## Download youtube audio with one command
alias ydl="youtube-dl -x"

#+END_SRC
