#+TITLE: Literate Emacs Config
#+STARTUP: noindent content

* Basics
Check if I'm using MacOS or NixOS: libraries Emacs uses to interface with hardware.
#+BEGIN_SRC emacs-lisp
(if (string-equal system-type "gnu/linux")
  (setq doom-font (font-spec :family "Source Code Pro" :size 25 :weight 'normal))
  (setq doom-font (font-spec :family "Source Code Pro" :size 15 :weight 'normal))
)
#+END_SRC


Cosmetic things.
#+BEGIN_SRC emacs-lisp
(setq
  doom-theme 'doom-monokai-classic
  monokai-highlight-line "#3A3A3A"
  display-line-numbers-type nil)
#+END_SRC

Maximise on startup.
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

Show fill column by default
#+BEGIN_SRC emacs-lisp
(display-fill-column-indicator-mode)
#+END_SRC


** Global Keybindings
Extra Global keybindings.

Helm. (removed helm-swoop - use swipe.)
 #+BEGIN_SRC emacs-lisp
(map! :n  "C-]" '+ivy/project-search)
 #+END_SRC

Swiper
 #+BEGIN_SRC emacs-lisp
(map! :n  "C-s" 'swiper-isearch)
 #+END_SRC

Shortcut to M-x.
 #+BEGIN_SRC emacs-lisp
(map! :leader "<ESC>" 'counsel-M-x)
 #+END_SRC

Misc.
 #+BEGIN_SRC emacs-lisp
(map!
  :n "<C-tab>" 'evil-window-next
  :n "K" 'evil-lookup)
 #+END_SRC

Function keys.
 #+BEGIN_SRC emacs-lisp
(map!
  :n "<f5>" 'compile
  :n "<f8>" 'org-capture
  :n "<f9>" 'org-agenda)
 #+END_SRC

Completion. (C-n will open the list of competions, C-p will be the usual quickcomplete)
 #+BEGIN_SRC emacs-lisp
(map! :i "C-n" 'company-complete)
 #+END_SRC

** Open PDFs

 #+BEGIN_SRC emacs-lisp
(after! openwith
    (setq openwith-associations '(("\\.pdf\\'" "zathura" (file)))))
 #+END_SRC


** Testing New Configuration Options
The cycle of restarting emacs and recompiling my literate config is too slow
when trying new features. Solution: [[~/emacsextraconfig.el]] file, loaded if it exists.
 #+BEGIN_SRC emacs-lisp
(if (file-exists-p "~/emacsextraconfig.el") (load "~/emacsextraconfig.el"))
 #+END_SRC


* ORG Specific
"K" to lookup in MacOS dictionary:
#+BEGIN_SRC emacs-lisp
(defun lookup-osx-dict-app () "Search for word at point in Mac dictionary"
  (interactive)
  (call-process      ; call and disown "open" with formatted arg
  "open" nil 0 nil
  (format "dict:://%s" (thing-at-point 'word))))

(add-hook 'org-mode-hook
          '(lambda () (setq-local evil-lookup-func #'lookup-osx-dict-app)))
#+END_SRC

Use XeLaTeX for export and highlight LaTeX and entities.
#+BEGIN_SRC emacs-lisp
(setq
  org-pandoc-options-for-latex-pdf '((pdf-engine . "xelatex"))
  org-highlight-latex-and-related '(latex script entities))
#+END_SRC

Keybindings for Pandoc export and "t" for selecting todo state.
#+BEGIN_SRC emacs-lisp
(map! :mode 'org-mode
      :n "<f5>" 'org-pandoc-export-to-latex-pdf
      :n "t" 'org-todo)
#+END_SRC

Disable org-indent-mode and auto-fill-mode (automatic line wrapping).
#+BEGIN_SRC emacs-lisp
(after! org (setq org-startup-indented nil))
(remove-hook 'text-mode-hook #'auto-fill-mode)
#+END_SRC

Prettify
#+BEGIN_SRC emacs-lisp
(setq
  org-pretty-entities-include-sub-superscripts t
  prettify-symbols-unprettify-at-point 'right
  org-ellipsis " ▼ ")
#+END_SRC

Smartparens disable "_" matching and add "\left( \right)"
#+begin_src emacs-lisp
(sp-local-pair 'org-mode "_" nil :actions :rem)
(sp-local-pair 'org-mode "\\left(" "\\right)" :trigger "\\l(")
(sp-local-pair 'org-mode "\\left[" "\\right]" :trigger "\\l[")
(sp-local-pair 'org-mode "\\left\\{" "\\right\\}" :trigger "\\l{")
(sp-local-pair 'org-mode "\\left\\|" "\\right\\|" :trigger "\\l|")
#+end_src

Stop annoying indentation.
#+begin_src emacs-lisp
(setq org-adapt-indentation 'nil)
#+end_src

Set overall ORG directory.
#+begin_src emacs-lisp
(setq org-directory "~/Dropbox/ORG")
#+end_src

** Anki Editor Mode
Cloze with meta-C (can't seem to do this in only Anki mode).
#+BEGIN_SRC emacs-lisp
(map! :mode 'org-mode :v "M-c" 'anki-editor-cloze-region)
#+END_SRC

Insert a technical note.
#+BEGIN_SRC emacs-lisp
(defun anki-editor-insert-technical-note ()
  "Insert ANKI Technical Note and toggle mode on."
  (interactive)
  (org-mode)
  (anki-editor-mode 'nil)
  (insert "* Anki Technical Note\n:PROPERTIES:\n:ANKI_DECK: Technical\n:ANKI_NOTE_TYPE:"
          " Technical\n:END:\n** Text\n** Source\n** Extra"))
#+END_SRC

Get rid of annoying HTML <p> and </p> tags on export.
#+BEGIN_SRC emacs-lisp
(defun filter-out-p (str _ _)
  (replace-regexp-in-string "\n<p>\\|</p>\n\\|<p>\\|</p>" "" str))

(after! anki-editor
  (setq anki-editor--ox-anki-html-backend
    (org-export-create-backend
      :parent 'html
      :filters
        '((:filter-paragraph . filter-out-p)))))
#+END_SRC

** Bibliographies and Referencing
Org-ref and bibtex setup.
#+BEGIN_SRC emacs-lisp
(setq
  ;; Notes for BibTex
  org-ref-bibliography-notes "~/Dropbox/ORG/papers.org"

  ;; Set the default bibliography for both plugins
  org-ref-default-bibliography '("~/Dropbox/references.bib")
  bibtex-completion-bibliography "~/Dropbox/references.bib"

  ;; helm-bibtex finds pdf using bibtex field "file" set by zotero better-bibtex.
  ;; we set that to open with mac "open" and org-ref to get pdfs using this.
  bibtex-completion-pdf-field "file"
  bibtex-completion-pdf-open-function
  (lambda (fpath) (start-process "open" "*open*" "open" fpath))
  org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex

  ;; Custom created note format
  org-ref-note-title-format
  "* TODO %2a. %t (%y).
      :PROPERTIES:
      :Custom_ID: %k
      :AUTHOR: %9a
      :YEAR: %y
      :Interest:
      :Difficulty:
      :Tags:
      :END:
      :CITE: %l"
)
#+END_SRC

** Prettify-Entities
Do this automatically, and add a few extras:
#+BEGIN_SRC emacs-lisp
(after! org
    (add-to-list 'org-entities-user
                '("Pr" "\\Pr" t "&#x2119" "Pr" "Pr" "ℙ"))
    (add-to-list 'org-entities-user
                '("Re" "\\Re" t "&#x211d" "Re" "Re" "ℝ"))
    (add-to-list 'org-entities-user
                '("sqrt" "\\sqrt" t "&#x221A" "Sqrt" "Sqrt" "√"))
    (add-to-list 'org-entities-user
                '("lesssim" "\\lesssim" t "&#8818" "Lesssim" "Lesssim" "≲"))
    (add-to-list 'org-entities-user
                '("gtrsim" "\\gtrsim" t "&#2273" "Gtrsim" "Gtrsim" "≳"))
    (add-to-list 'org-entities-user
                '("trianglelefteq" "\\trianglelefteq" t "&#8884;" "Triangelefteq" "Triangelefteq" "⊴"))
    (setq org-pretty-entites t))
#+END_SRC

** Roam
Set ORG-Roam directory:
#+BEGIN_SRC emacs-lisp
(setq org-roam-directory "~/Dropbox/ORG/roam")
#+END_SRC

** Agenda and GTD
#+BEGIN_SRC emacs-lisp
(setq
    ;; ORG TO DO setups
  org-agenda-files (list "~/Dropbox/ORG/todo/")

  org-agenda-custom-commands
  '(("w" todo "WAITING" nil)
    ("n" todo "NEXT" nil)
    ;; options: org-agenda.el:org-agenda-custom-commands-local-options
    ("" "Main Agenda View"
      ((todo "NEXT"
            ((org-agenda-overriding-header "NEXT Actions")))
      (tags "REFILE"
            ((org-agenda-overriding-header "Items to Refile")
              (org-tags-match-list-sublevels nil)))
      (agenda "" ((org-agenda-span 8)
                  (org-agenda-start-day nil)))  ;; today
      (todo "WAITING"
            ((org-agenda-overriding-header "Waiting Actions")))
      (todo "HOLD"
            ((org-agenda-overriding-header "On Hold Actions"))))))

  org-capture-templates
  (quote (("t" "todo" entry (file "~/Dropbox/ORG/todo/refile.org")
            "* TODO %?\n%U\n%a\n"))))
#+END_SRC

Set TODO keywords when ORG already loaded:
#+BEGIN_SRC emacs-lisp
(after! org
  (setq
    org-todo-keywords
    (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
            (sequence "HOLD(h)" "WAITING(w@/!)" "MAYBE(m)" "|" "CANCELLED(c)")))

    org-todo-keyword-faces
    (quote (("TODO" :foreground "red" :weight bold)
            ("NEXT" :foreground "orange" :weight bold)
            ("DONE" :foreground "green" :weight bold)
            ("MAYBE" :foreground "blue" :weight bold)
            ("HOLD" :foreground "gold" :weight bold)
            ("CANCELLED" :foreground "purple" :weight bold)
            ("WAITING" :foreground "magenta" :weight bold)))))
#+END_SRC


* Language-Specific
** C
#+BEGIN_SRC emacs-lisp
(setq
  c-basic-offset 8
  tab-width 8
  indent-tabs-mode t
  c-default-style "linux")
#+END_SRC

** TeX
Tex master files are called "main".
#+BEGIN_SRC emacs-lisp
(setq TeX-master "main")
#+END_SRC

Isearch Latex Math
#+BEGIN_SRC emacs-lisp
(defun latex-isearch-in-math ()
  "Call `isearch-forward' with `isearch-filter-predicate' set to filter out matches outside LaTeX math environments."
  (interactive)
  (let ((isearch-filter-predicate
         (lambda (BEG END)
           (save-excursion (save-match-data (goto-char BEG) (texmathp)))))
        (case-fold-search nil))
    (funcall 'isearch-forward)))
#+END_SRC


* Miscellaneous
#+BEGIN_SRC emacs-lisp
(setq
  ;; Whitespace mode
  whitespace-style '(face tabs tab-mark newline-mark)
  whitespace-display-mappings '((newline-mark 10 [172 10]) (tab-mark 9 [9655 9]))

  ;; Avy switch all windows and allow all alphabetic keys
  avy-all-windows 'all-frames
  avy-keys (number-sequence ?a ?z) ; a-z for avi

  ;; Get aliases in inferior shell
  shell-command-switch "-ic"

  ;; Switch windows with S-<direction>
  windmove-default-keybindings t

  ;; Faster projectile
  projectile-enable-caching t

  ;; When using 'K' to lookup (non-lisp) things, use dash
  evil-lookup-func #'dash-at-point
)

;; Disable evil in info windows
(evil-set-initial-state 'info-mode 'emacs)
#+END_SRC



** Hide Compilation Window
Make the compilation window automatically disappear if no errors - from enberg
on #emacs.
#+BEGIN_SRC emacs-lisp
(defun my-comp-finish (buf str)
  (if (null (string-match ".*exited abnormally.*" str))
      ;;no errors, make the compilation window go away after a second
      (progn
        (run-at-time
          "1 sec" nil 'delete-windows-on
          (get-buffer-create "*compilation*"))
        (message "No Compilation Errors!"))))
(add-hook 'compilation-finish-functions 'my-comp-finish)
#+END_SRC

** Unicode-Math Input
Fancy input rules - add all non-conflicting characters from unicode-math-symbols
list:
https://github.com/vspinu/math-symbol-lists/blob/master/math-symbol-lists.el
Everything is prefixed with ";" rather than "\", including sub and
super-scripts. If extra rules wanted, use form: (quail-define-rules ("\\unrhd"
#X22B5) ("\\unrhd" #X22B5))

Note math-symbol-list-extended sets the default Greek characters to code points
that are unsupported on the phone so is disabled.

#+BEGIN_SRC emacs-lisp
(package-initialize)
(require 'math-symbol-lists)
(quail-define-package "math" "UTF-8" "Ω" t)
(mapc (lambda (x)
        (if (cddr x)
            (quail-defrule
              ;; Remove "\" prefix if exists (not for sub/super scripts) and add ";" to all.
              (concat ";" (string-remove-prefix "\\" (cadr x)))
              (car (cddr x)))))
      (append math-symbol-list-basic ; math-symbol-list-extended
              math-symbol-list-subscripts math-symbol-list-superscripts))

#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq default-input-method 'math)
#+END_SRC


Or, alternatively, use company completion: turn it on by running this function, and add to automatically load on org.
#+BEGIN_SRC emacs-lisp
(defun activate-latex-unicode-competion ()
  (interactive)
  (add-to-list 'company-backends 'company-math-symbols-unicode))

(set-company-backend! 'org-mode 'company-math-symbols-unicode)
#+END_SRC


Use cdlatex mode.
#+BEGIN_SRC emacs-lisp
(map! :map cdlatex-mode-map
    :i "TAB" #'cdlatex-tab)
#+END_SRC


** Ranger
#+BEGIN_SRC emacs-lisp
(setq
ranger-cleanup-on-disable t
ranger-ignored-extensions '("mkv" "iso" "mp4" "DS_Store" "pdf")
ranger-max-preview-size 1
ranger-dont-show-binary t)
#+END_SRC
** Copilot
#+BEGIN_SRC emacs-lisp
;; accept completion from copilot and fallback to company
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (("C-TAB" . 'copilot-accept-completion-by-word)
         ("C-<tab>" . 'copilot-accept-completion-by-word)
         :map copilot-completion-map
         ("<tab>" . 'copilot-accept-completion)
         ("TAB" . 'copilot-accept-completion)))
#+END_SRC


* Fixes

Fix Bug with Undo and very large files
See https://github.com/doomemacs/doomemacs/issues/1407 - sometimes can't save.
Fixed by deleting undo-tree history.
#+BEGIN_SRC emacs-lisp
(setq undo-limit 40000
      undo-outer-limit 8000000
      undo-strong-limit 100000)
#+END_SRC


#+BEGIN_SRC emacs-lisp
;; Fix matlab commenting
(setq octave-comment-char 37)
#+END_SRC
